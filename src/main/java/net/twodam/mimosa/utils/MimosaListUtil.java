package net.twodam.mimosa.utils;

import net.twodam.mimosa.exceptions.MimosaIndexOutBoundException;
import net.twodam.mimosa.generators.compiler.CadrVariantFunctionGenerator;
import net.twodam.mimosa.types.MimosaList;
import net.twodam.mimosa.types.MimosaNumber;
import net.twodam.mimosa.types.MimosaPair;
import net.twodam.mimosa.types.MimosaType;

import java.util.ArrayList;
import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;

import static net.twodam.mimosa.types.MimosaList.isNil;
import static net.twodam.mimosa.types.MimosaList.list;
import static net.twodam.mimosa.utils.MimosaListUtil.ChainHelper.wrap;
import static net.twodam.mimosa.utils.TypeUtil.checkType;

/**
 * Cadr shorthand functions was generated by {@link CadrVariantFunctionGenerator#generateFunctions()}
 */
public class MimosaListUtil {
    //=========== Car and cdr ===========
    public static MimosaType car(MimosaType expr) {
        checkType(MimosaPair.class, expr);
        return ((MimosaPair) expr).car();
    }

    public static MimosaType cdr(MimosaType expr) {
        checkType(MimosaPair.class, expr);
        return ((MimosaPair) expr).cdr();
    }

    //=========== List Operations ===========
    //ref: https://docs.racket-lang.org/reference/pairs.html#%28part._.List_.Operations%29
    public static MimosaNumber length(MimosaType list) {
        checkType(MimosaList.class, list);

        int length = 0;
        while(!isNil(list)) {
            length++;
            list = cdr(list);
        }
        return MimosaNumber.numToVal(length);
    }

    public static MimosaType listRef(MimosaType list, MimosaType index) {
        checkType(MimosaPair.class, list);

        MimosaType expr = list;
        int cursor = MimosaNumber.valToNum(index);
        while(cursor!=0 && !isNil(expr)) {
            cursor--;
            expr = cdr(expr);
        }

        if(cursor == 0 && !isNil(cdr(expr))) {
            return car(expr);
        } else {
            throw MimosaIndexOutBoundException.of(list, index);
        }
    }

    /*public static MimosaList append(MimosaList a, MimosaList b) {
        //
    }*/

    //=========== List Iteration ===========
    //ref: https://docs.racket-lang.org/reference/pairs.html#%28part._.List_.Iteration%29
    public static MimosaList map(Function<MimosaType, MimosaType> mapper, MimosaType list) {
        checkType(MimosaList.class, list);

        List<MimosaType> tmpList = new ArrayList<>();
        while(!isNil(list)) {
            tmpList.add(mapper.apply(car(list)));
            list = cdr(list);
        }
        return list(tmpList);
    }

    public static void foreach(Consumer<MimosaType> consumer, MimosaType list) {
        checkType(MimosaList.class, list);

        while(!isNil(list)) {
            consumer.accept(car(list));
            list = cdr(list);
        }
    }

    public static MimosaType foldl(BiFunction<MimosaType, MimosaType, MimosaType> biFunction, MimosaType init, MimosaType list) {
        checkType(MimosaList.class, list);
        MimosaType ret = init;
        while(!isNil(list)) {
            ret = biFunction.apply(car(list), ret);
            list = cdr(list);
        }
        return ret;
    }

    //=========== Cadr shorthand functions ===========

    /**
     * Convert nest invocation to chain invocation
     *  e.g car(cdr(expr)) -> ChainHelper.wrap(expr).cdr().car().build();
     */
    static class ChainHelper {
        private MimosaType expr;

        ChainHelper(MimosaType expr) {
            this.expr = expr;
        }

        static ChainHelper wrap(MimosaType expr) {
            return new ChainHelper(expr);
        }

        ChainHelper car() {
            expr = MimosaListUtil.car(expr);
            return this;
        }

        ChainHelper cdr() {
            expr = MimosaListUtil.cdr(expr);
            return this;
        }

        MimosaType build() {
            return expr;
        }
    }

    public static MimosaType caar(MimosaType expr) {
        return wrap(expr).car().car().build();
    }

    public static MimosaType cadr(MimosaType expr) {
        return wrap(expr).cdr().car().build();
    }

    public static MimosaType cdar(MimosaType expr) {
        return wrap(expr).car().cdr().build();
    }

    public static MimosaType cddr(MimosaType expr) {
        return wrap(expr).cdr().cdr().build();
    }

    public static MimosaType caaar(MimosaType expr) {
        return wrap(expr).car().car().car().build();
    }

    public static MimosaType caadr(MimosaType expr) {
        return wrap(expr).cdr().car().car().build();
    }

    public static MimosaType cadar(MimosaType expr) {
        return wrap(expr).car().cdr().car().build();
    }

    public static MimosaType caddr(MimosaType expr) {
        return wrap(expr).cdr().cdr().car().build();
    }

    public static MimosaType cdaar(MimosaType expr) {
        return wrap(expr).car().car().cdr().build();
    }

    public static MimosaType cdadr(MimosaType expr) {
        return wrap(expr).cdr().car().cdr().build();
    }

    public static MimosaType cddar(MimosaType expr) {
        return wrap(expr).car().cdr().cdr().build();
    }

    public static MimosaType cdddr(MimosaType expr) {
        return wrap(expr).cdr().cdr().cdr().build();
    }

    public static MimosaType caaaar(MimosaType expr) {
        return wrap(expr).car().car().car().car().build();
    }

    public static MimosaType caaadr(MimosaType expr) {
        return wrap(expr).cdr().car().car().car().build();
    }

    public static MimosaType caadar(MimosaType expr) {
        return wrap(expr).car().cdr().car().car().build();
    }

    public static MimosaType caaddr(MimosaType expr) {
        return wrap(expr).cdr().cdr().car().car().build();
    }

    public static MimosaType cadaar(MimosaType expr) {
        return wrap(expr).car().car().cdr().car().build();
    }

    public static MimosaType cadadr(MimosaType expr) {
        return wrap(expr).cdr().car().cdr().car().build();
    }

    public static MimosaType caddar(MimosaType expr) {
        return wrap(expr).car().cdr().cdr().car().build();
    }

    public static MimosaType cadddr(MimosaType expr) {
        return wrap(expr).cdr().cdr().cdr().car().build();
    }

    public static MimosaType cdaaar(MimosaType expr) {
        return wrap(expr).car().car().car().cdr().build();
    }

    public static MimosaType cdaadr(MimosaType expr) {
        return wrap(expr).cdr().car().car().cdr().build();
    }

    public static MimosaType cdadar(MimosaType expr) {
        return wrap(expr).car().cdr().car().cdr().build();
    }

    public static MimosaType cdaddr(MimosaType expr) {
        return wrap(expr).cdr().cdr().car().cdr().build();
    }

    public static MimosaType cddaar(MimosaType expr) {
        return wrap(expr).car().car().cdr().cdr().build();
    }

    public static MimosaType cddadr(MimosaType expr) {
        return wrap(expr).cdr().car().cdr().cdr().build();
    }

    public static MimosaType cdddar(MimosaType expr) {
        return wrap(expr).car().cdr().cdr().cdr().build();
    }

    public static MimosaType cddddr(MimosaType expr) {
        return wrap(expr).cdr().cdr().cdr().cdr().build();
    }
}
